"""
Django settings for medical_assistant_project project.

Generated by 'django-admin startproject' using Django X.Y.Z.

For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url

# --- Environment Variable Loading ---
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file in the project root
# Make sure your .env file is in the same directory as manage.py
ENV_PATH = BASE_DIR / '.env'
load_dotenv(dotenv_path=ENV_PATH)

# --- Core Security Settings ---

# SECURITY WARNING: keep the secret key used in production secret!
# Load from environment variable
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("No SECRET_KEY set. Please set it in your .env file.")

# SECURITY WARNING: don't run with debug turned on in production!
# Load from environment variable, default to False if not set or invalid
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

# Define allowed hosts. Start with development hosts.
# For production, replace with your actual domain(s) or load from env var.
ALLOWED_HOSTS = []
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
# Example for production using environment variable:
# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []


# --- Application Definition ---

INSTALLED_APPS = [
    # Django Core Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-Party Apps
    'rest_framework',           # Django REST Framework for APIs
    'pgvector',                 # Supabase pgvector support
    'django_filters',           # For filtering in DRF views

    # Your Local Apps
    'api.apps.ApiConfig',       # Reference your api app's config class
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medical_assistant_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [], # Add template directories here if you build a Django frontend
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medical_assistant_project.wsgi.application'


# --- Database Configuration ---
# https://docs.djangoproject.com/en/stable/ref/settings/#databases

DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("No DATABASE_URL set. Please set it in your .env file (e.g., postgresql://user:pass@host:port/name)")

DATABASES = {
    'default': dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600, # Number of seconds database connections should persist
        engine='django.db.backends.postgresql' # Ensure PostgreSQL engine is used
    )
}
# Ensure the engine is explicitly PostgreSQL, dj_database_url usually handles this but good practice to confirm
DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'


# --- Password Validation ---
# https://docs.djangoproject.com/en/stable/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/stable/topics/i18n/

LANGUAGE_CODE = 'en-nz' # Set to New Zealand English

TIME_ZONE = 'Pacific/Auckland' # Set to New Zealand Time Zone

USE_I18N = True

USE_TZ = True # Use timezone-aware datetimes


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/stable/howto/static-files/

STATIC_URL = 'static/'
# Defines the URL prefix for static files (e.g., /static/css/style.css)

# Additional locations of static files
STATICFILES_DIRS = [
    # BASE_DIR / "static", # Uncomment if you have a project-wide static directory
]

# Directory where collectstatic will gather static files for deployment
STATIC_ROOT = BASE_DIR / "staticfiles"


# --- Media Files (User Uploads - Not used for Supabase Storage in this guide) ---
# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/stable/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Custom Project Settings ---

# Supabase Configuration (loaded from .env)
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY") # For backend operations

if not all([SUPABASE_URL, SUPABASE_ANON_KEY, SUPABASE_SERVICE_KEY]):
    print("WARNING: Supabase environment variables (URL, ANON_KEY, SERVICE_KEY) are not fully set.")
    # Consider raising an error if these are strictly required at startup
    # raise ValueError("Supabase URL/Keys missing in .env")

# Hugging Face Configuration
HUGGINGFACEHUB_API_TOKEN = os.getenv("HUGGINGFACEHUB_API_TOKEN")
if not HUGGINGFACEHUB_API_TOKEN:
    print("WARNING: HUGGINGFACEHUB_API_TOKEN not set in .env. Access to Hugging Face Inference API will fail.")
    # You might only need this if actually using the HF Inference API endpoint type.


# --- Django REST Framework Settings ---
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or restrict access globally. Start with AllowAny for easier dev/testing.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        # Examples for later:
        # 'rest_framework.permissions.IsAuthenticated', # Requires login
        # 'rest_framework.permissions.IsAdminUser', # Requires admin status
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Add authentication classes here as needed (e.g., TokenAuthentication)
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # If using Django login
    ],
    'DEFAULT_FILTER_BACKENDS': [
        # Enable DjangoFilterBackend globally for easier list filtering
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20 # Example: Set default page size for paginated results
}

# --- Logging Configuration (Optional but Recommended) ---
# Basic example, can be customized further
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO', # Set to DEBUG for more verbose output during development
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'api': { # Your app's logger
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO', # More logs from your app in dev
            'propagate': False,
        },
    },
}